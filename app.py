#API_KEY = "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"  # üëâ ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏ï‡∏£‡∏á‡∏ô‡∏µ‡πâ

import streamlit as st
import requests
from datetime import datetime
import random
import re
from PyPDF2 import PdfReader
import pandas as pd

# üåê ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ Streamlit
st.set_page_config(page_title="Groq Chatbot", page_icon="ü§ñ")

# ‚úÖ Header ‡∏ï‡∏£‡∏∂‡∏á‡∏ö‡∏ô‡∏™‡∏∏‡∏î‡πÅ‡∏ö‡∏ö‡∏ï‡∏£‡∏á‡∏Å‡∏•‡∏≤‡∏á
#st.markdown("""
#    <div style="position: fixed; top: 189px; left: 0; width: 100%; background-color: #f0f2f6;
#                display: flex; justify-content: center; align-items: center;
#                padding: 1rem 1.5rem; font-size: 24px; font-weight: bold; color: #333;
#                z-index: 1000; border-bottom: 1px solid #ddd;">
#        ü§ñ Junior Chatbot
#    </div>
#    <div style="margin-top: 250px;"></div>
#""", unsafe_allow_html=True)

# üîê Groq API
API_KEY = "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"  # üëà ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏ï‡∏£‡∏á‡∏ô‡∏µ‡πâ
API_URL = "https://api.groq.com/openai/v1/chat/completions"
MODEL = "llama3-8b-8192"

# üß† SYSTEM MESSAGE
SYSTEM_MESSAGE = {
    "role": "system",
    "content": "‡∏Ñ‡∏∏‡∏ì‡∏Ñ‡∏∑‡∏≠‡∏ú‡∏π‡πâ‡∏ä‡πà‡∏ß‡∏¢‡∏ó‡∏µ‡πà‡πÄ‡∏õ‡πá‡∏ô‡∏°‡∏¥‡∏ï‡∏£‡πÅ‡∏•‡∏∞‡∏°‡∏µ‡∏õ‡∏£‡∏∞‡πÇ‡∏¢‡∏ä‡∏ô‡πå ‡∏ï‡∏≠‡∏ö‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡∏ï‡∏≤‡∏°‡∏ó‡∏µ‡πà‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏ñ‡∏≤‡∏°"
}

# üì¶ ‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏° session state
if "all_chats" not in st.session_state:
    st.session_state.all_chats = {}

if "chat_files" not in st.session_state:
    st.session_state.chat_files = {}

if "chat_summaries" not in st.session_state:
    st.session_state.chat_summaries = {}

if "current_chat" not in st.session_state:
    st.session_state.current_chat = "‡πÅ‡∏ä‡∏ó‡πÉ‡∏´‡∏°‡πà"

if st.session_state.current_chat not in st.session_state.all_chats:
    st.session_state.all_chats[st.session_state.current_chat] = [SYSTEM_MESSAGE]

if "renaming" not in st.session_state:
    st.session_state.renaming = None

# Sidebar Header
st.sidebar.title("ü§ñ Junior Chatbot")
st.sidebar.markdown("---")
st.sidebar.markdown("üìÇ ‡∏´‡∏±‡∏ß‡∏Ç‡πâ‡∏≠‡πÅ‡∏ä‡∏ó", unsafe_allow_html=True)

if st.sidebar.button("‚ûï ‡πÄ‡∏£‡∏¥‡πà‡∏°‡πÅ‡∏ä‡∏ó‡πÉ‡∏´‡∏°‡πà"):
    new_title = f"‡πÅ‡∏ä‡∏ó‡πÄ‡∏°‡∏∑‡πà‡∏≠ {datetime.now().strftime('%H:%M:%S')}"
    st.session_state.all_chats[new_title] = [SYSTEM_MESSAGE]
    st.session_state.current_chat = new_title
    st.session_state.last_user_msg = ""
    st.rerun()

for title in list(st.session_state.all_chats.keys()):
    is_selected = title == st.session_state.current_chat
    col1, col2, col3 = st.sidebar.columns([6, 1, 1])
    if col1.button(f"{title}", key=f"title-{title}"):
        st.session_state.current_chat = title
        st.session_state.renaming = None
        st.rerun()
    if col2.button("‚úèÔ∏è", key=f"edit-{title}"):
        st.session_state.renaming = title
        st.rerun()
    if col3.button("üóëÔ∏è", key=f"delete-{title}"):
        del st.session_state.all_chats[title]
        st.session_state.chat_files.pop(title, None)
        st.session_state.chat_summaries.pop(title, None)
        if title == st.session_state.current_chat:
            st.session_state.current_chat = next(iter(st.session_state.all_chats), "‡πÅ‡∏ä‡∏ó‡πÉ‡∏´‡∏°‡πà")
        st.rerun()

# ‚úèÔ∏è ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏ä‡∏∑‡πà‡∏≠‡∏´‡∏±‡∏ß‡∏Ç‡πâ‡∏≠
if st.session_state.renaming == st.session_state.current_chat:
    new_name = st.sidebar.text_input("‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏ä‡∏∑‡πà‡∏≠‡∏´‡∏±‡∏ß‡∏Ç‡πâ‡∏≠", value=st.session_state.current_chat)
    if st.sidebar.button("‚úÖ ‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏ä‡∏∑‡πà‡∏≠"):
        old = st.session_state.current_chat
        if new_name and new_name != old:
            st.session_state.all_chats[new_name] = st.session_state.all_chats.pop(old)
            st.session_state.chat_files[new_name] = st.session_state.chat_files.pop(old, "")
            st.session_state.chat_summaries[new_name] = st.session_state.chat_summaries.pop(old, {})
            st.session_state.current_chat = new_name
        st.session_state.renaming = None
        st.rerun()

# üìú ‡πÇ‡∏´‡∏•‡∏î‡∏ö‡∏ó‡∏™‡∏ô‡∏ó‡∏ô‡∏≤
chat_id = st.session_state.current_chat
chat_history = st.session_state.all_chats[chat_id]

# üìé ‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ü‡∏•‡πå‡∏´‡∏•‡∏≤‡∏¢‡πÑ‡∏ü‡∏•‡πå‡πÅ‡∏•‡∏∞‡∏™‡∏£‡∏∏‡∏õ
st.markdown("#### üìé ‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ü‡∏•‡πå (PDF ‡∏´‡∏£‡∏∑‡∏≠ CSV) ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏´‡∏±‡∏ß‡∏Ç‡πâ‡∏≠‡∏ô‡∏µ‡πâ")
uploaded_files = st.file_uploader("‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÑ‡∏ü‡∏•‡πå", type=["pdf", "csv"], accept_multiple_files=True, key=chat_id)

summaries = {}
all_text = ""

if uploaded_files:
    st.markdown("#### üß† ‡∏™‡∏£‡∏∏‡∏õ‡πÉ‡∏à‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç‡∏Ç‡∏≠‡∏á‡πÑ‡∏ü‡∏•‡πå‡∏ó‡∏µ‡πà‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î")
    for file in uploaded_files:
        if file.name.endswith(".pdf"):
            reader = PdfReader(file)
            text = "\n".join([page.extract_text() for page in reader.pages if page.extract_text()])
        elif file.name.endswith(".csv"):
            df = pd.read_csv(file)
            text = df.to_string(index=False)
        else:
            text = ""

        all_text += f"\n--- ‡∏à‡∏≤‡∏Å‡πÑ‡∏ü‡∏•‡πå: {file.name} ---\n{text[:3000]}\n"

        # üß† ‡∏™‡∏£‡∏∏‡∏õ‡πÉ‡∏à‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Ç‡∏≠‡∏á‡πÑ‡∏ü‡∏•‡πå
        with st.spinner(f"ü§ñ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏™‡∏£‡∏∏‡∏õ {file.name}..."):
            headers = {"Authorization": f"Bearer {API_KEY}", "Content-Type": "application/json"}
            payload = {
                "model": MODEL,
                "messages": [
                    {
                        "role": "system",
                        "content": "‡∏Ñ‡∏∏‡∏ì‡∏Ñ‡∏∑‡∏≠‡∏ú‡∏π‡πâ‡∏ä‡πà‡∏ß‡∏¢‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡πà‡∏á‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡∏£‡∏∏‡∏õ‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£‡πÄ‡∏õ‡πá‡∏ô‡∏†‡∏≤‡∏©‡∏≤‡πÑ‡∏ó‡∏¢‡πÅ‡∏ö‡∏ö‡∏Å‡∏£‡∏∞‡∏ä‡∏±‡∏ö‡πÅ‡∏•‡∏∞‡πÄ‡∏Ç‡πâ‡∏≤‡πÉ‡∏à‡∏á‡πà‡∏≤‡∏¢"
                    },
                    {
                        "role": "user",
                        "content": (
                            "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏™‡∏£‡∏∏‡∏õ‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡∏´‡∏≤‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç‡∏Ç‡∏≠‡∏á‡πÑ‡∏ü‡∏•‡πå‡∏ï‡πà‡∏≠‡πÑ‡∏õ‡∏ô‡∏µ‡πâ **‡πÄ‡∏õ‡πá‡∏ô‡∏†‡∏≤‡∏©‡∏≤‡πÑ‡∏ó‡∏¢** ‡πÇ‡∏î‡∏¢‡πÉ‡∏´‡πâ‡∏™‡∏±‡πâ‡∏ô ‡∏Å‡∏£‡∏∞‡∏ä‡∏±‡∏ö ‡∏ä‡∏±‡∏î‡πÄ‡∏à‡∏ô "
                            "‡∏´‡∏≤‡∏Å‡πÄ‡∏õ‡πá‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡πÉ‡∏´‡πâ‡πÅ‡∏™‡∏î‡∏á‡∏†‡∏≤‡∏û‡∏£‡∏ß‡∏°‡∏ó‡∏µ‡πà‡πÄ‡∏Ç‡πâ‡∏≤‡πÉ‡∏à‡∏á‡πà‡∏≤‡∏¢:\n\n"
                            f"{text[:3000]}"
                        )
                    }
                ],
                "temperature": 0.3,
            }
            try:
                res = requests.post(API_URL, headers=headers, json=payload)
                summary = res.json()["choices"][0]["message"]["content"]
            except Exception as e:
                summary = f"‚ùå ‡∏™‡∏£‡∏∏‡∏õ‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ: {e}"

            summaries[file.name] = summary
            st.markdown(f"‚úÖ **{file.name}**:\n\n{summary}")

    st.session_state.chat_files[chat_id] = all_text
    st.session_state.chat_summaries[chat_id] = summaries
    st.success("‚úÖ ‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡πÅ‡∏•‡∏∞‡∏™‡∏£‡∏∏‡∏õ‡πÑ‡∏ü‡∏•‡πå‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à‡πÅ‡∏•‡πâ‡∏ß")

# ‚úÖ ‡πÅ‡∏™‡∏î‡∏á‡∏™‡∏£‡∏∏‡∏õ‡∏ó‡∏µ‡πà‡πÄ‡∏Ñ‡∏¢‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î
#if chat_id in st.session_state.chat_summaries:
#    st.markdown("### üìÑ ‡∏™‡∏£‡∏∏‡∏õ‡πÑ‡∏ü‡∏•‡πå‡∏ó‡∏µ‡πà‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡∏Å‡πà‡∏≠‡∏ô‡∏´‡∏ô‡πâ‡∏≤")
#    for fname, summary in st.session_state.chat_summaries[chat_id].items():
#        st.markdown(f"**{fname}**\n\n{summary}")

# ‚úÖ ‡∏ï‡∏£‡∏ß‡∏à‡∏†‡∏≤‡∏©‡∏≤
def is_english(text):
    return re.match(r'^[a-zA-Z0-9\s\.,!?]+$', text.strip()) is not None

# ü§ñ ‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏ï‡∏±‡∏ß‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡πÅ‡∏£‡∏Å
# ‡πÅ‡∏™‡∏î‡∏á‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏ï‡∏±‡∏ß‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ assistant ‡∏ï‡∏≠‡∏ö‡πÄ‡∏•‡∏¢
if len(chat_history) == 1 or not any(m["role"] == "assistant" for m in chat_history[1:]):
    with st.chat_message("assistant"):
        st.markdown(intro)
    chat_history.append({"role": "assistant", "content": intro})

# ‡πÅ‡∏™‡∏î‡∏á‡∏ö‡∏ó‡∏™‡∏ô‡∏ó‡∏ô‡∏≤
for msg in chat_history[1:]:
    with st.chat_message(msg["role"]):
        st.markdown(msg["content"])

# ‚úçÔ∏è ‡∏£‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ
if user_input := st.chat_input("‡∏û‡∏¥‡∏°‡∏û‡πå‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡∏ó‡∏µ‡πà‡∏ô‡∏µ‡πà..."):
    st.session_state.last_user_msg = user_input
    with st.chat_message("user"):
        st.markdown(user_input)
    chat_history.append({"role": "user", "content": user_input})

    # ‡πÉ‡∏ä‡πâ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å‡πÑ‡∏ü‡∏•‡πå (‡∏ñ‡πâ‡∏≤‡∏°‡∏µ)
    file_context = st.session_state.chat_files.get(chat_id, "")
    if file_context:
        sys_msg = {
            "role": "system",
            "content": f"""‡∏Ñ‡∏∏‡∏ì‡∏à‡∏∞‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£‡∏ó‡∏µ‡πà‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡∏î‡∏±‡∏á‡∏ô‡∏µ‡πâ:\n\n{file_context[:3000]}\n\n
            ‡πÇ‡∏õ‡∏£‡∏î‡∏ï‡∏≠‡∏ö‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡πÇ‡∏î‡∏¢‡∏≠‡πâ‡∏≤‡∏á‡∏≠‡∏¥‡∏á‡∏à‡∏≤‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ç‡πâ‡∏≤‡∏á‡∏ï‡πâ‡∏ô‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô ‡∏´‡∏≤‡∏Å‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£‡πÉ‡∏´‡πâ‡∏ï‡∏≠‡∏ö‡∏ß‡πà‡∏≤ "‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Ç‡πâ‡∏≠‡∏á‡πÉ‡∏ô‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£"."""
        }
        full_messages = [sys_msg] + chat_history[1:]
    else:
        full_messages = chat_history

    with st.spinner("‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏Ñ‡∏¥‡∏î‡∏Ñ‡∏≥‡∏ï‡∏≠‡∏ö..."):
        headers = {"Authorization": f"Bearer {API_KEY}", "Content-Type": "application/json"}
        payload = {"model": MODEL, "messages": full_messages, "temperature": 0.7}

        try:
            res = requests.post(API_URL, headers=headers, json=payload)
            reply = res.json()["choices"][0]["message"]["content"]
        except Exception as e:
            reply = f"‚ùå ‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡∏Ç‡∏ì‡∏∞‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠: {e}"

    with st.chat_message("assistant"):
        st.markdown(reply)
    chat_history.append({"role": "assistant", "content": reply})


