#API_KEY = "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"  # üëâ ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏ï‡∏£‡∏á‡∏ô‡∏µ‡πâ

import streamlit as st
import requests
from datetime import datetime

# üåê CONFIG
st.set_page_config(page_title="Groq Chatbot", page_icon="ü§ñ")

# ‚úÖ Header ‡∏ï‡∏£‡∏∂‡∏á‡∏î‡πâ‡∏≤‡∏ô‡∏ö‡∏ô ‡∏ï‡∏£‡∏á‡∏Å‡∏•‡∏≤‡∏á ‡πÅ‡∏•‡∏∞‡πÄ‡∏•‡∏∑‡πà‡∏≠‡∏ô‡∏•‡∏á 5cm
st.markdown("""
    <div style="position: fixed; top: 189px; left: 0; width: 100%; background-color: #f0f2f6;
                display: flex; justify-content: center; align-items: center;
                padding: 1rem 1.5rem; font-size: 24px; font-weight: bold; color: #333;
                z-index: 1000; border-bottom: 1px solid #ddd;">
        ü§ñ Junior Chatbot
    </div>
    <div style="margin-top: 250px;"></div>
""", unsafe_allow_html=True)

# üîê Groq API
API_KEY = "your-groq-api-key"  # üëà ‡πÉ‡∏™‡πà API Key ‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì
API_URL = "https://api.groq.com/openai/v1/chat/completions"
MODEL = "llama3-8b-8192"

# üåü system message
SYSTEM_MESSAGE = {
    "role": "system",
    "content": (
        "‡∏Ñ‡∏∏‡∏ì‡∏Ñ‡∏∑‡∏≠‡∏ú‡∏π‡πâ‡∏ä‡πà‡∏ß‡∏¢‡∏ó‡∏µ‡πà‡πÄ‡∏õ‡πá‡∏ô‡∏°‡∏¥‡∏ï‡∏£‡πÅ‡∏•‡∏∞‡∏°‡∏µ‡∏õ‡∏£‡∏∞‡πÇ‡∏¢‡∏ä‡∏ô‡πå "
        "‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡∏ô‡∏ó‡∏ô‡∏≤ ‡πÉ‡∏´‡πâ‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏ï‡∏±‡∏ß‡∏ß‡πà‡∏≤ "
        "'‡∏™‡∏ß‡∏±‡∏™‡∏î‡∏µ‡∏Ñ‡∏£‡∏±‡∏ö! ‡∏â‡∏±‡∏ô‡∏ä‡∏∑‡πà‡∏≠ junior Chatbot ‡∏ú‡∏π‡πâ‡∏ä‡πà‡∏ß‡∏¢‡∏ó‡∏µ‡πà‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏à‡∏∞‡∏ï‡∏≠‡∏ö‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡πÅ‡∏•‡∏∞‡∏ä‡πà‡∏ß‡∏¢‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡∏Ñ‡∏∏‡∏ì‡πÉ‡∏ô‡πÄ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏ï‡πà‡∏≤‡∏á‡πÜ'"
    )
}

# üß† session state
if "all_chats" not in st.session_state:
    st.session_state.all_chats = {}

if "current_chat" not in st.session_state:
    st.session_state.current_chat = "‡πÅ‡∏ä‡∏ó‡πÉ‡∏´‡∏°‡πà"

if st.session_state.current_chat not in st.session_state.all_chats:
    st.session_state.all_chats[st.session_state.current_chat] = [SYSTEM_MESSAGE]

if "renaming" not in st.session_state:
    st.session_state.renaming = None

# üìÇ SIDEBAR
st.sidebar.title("üìÇ ‡∏´‡∏±‡∏ß‡∏Ç‡πâ‡∏≠‡πÅ‡∏ä‡∏ó")

# ‚ûï ‡∏õ‡∏∏‡πà‡∏°‡πÄ‡∏£‡∏¥‡πà‡∏°‡πÅ‡∏ä‡∏ó‡πÉ‡∏´‡∏°‡πà
if st.sidebar.button("‚ûï ‡πÄ‡∏£‡∏¥‡πà‡∏°‡πÅ‡∏ä‡∏ó‡πÉ‡∏´‡∏°‡πà"):
    new_title = f"‡πÅ‡∏ä‡∏ó‡πÄ‡∏°‡∏∑‡πà‡∏≠ {datetime.now().strftime('%H:%M:%S')}"
    st.session_state.all_chats[new_title] = [SYSTEM_MESSAGE]
    st.session_state.current_chat = new_title
    st.rerun()

# üîÅ ‡πÅ‡∏™‡∏î‡∏á‡∏´‡∏±‡∏ß‡∏Ç‡πâ‡∏≠‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î ‡∏û‡∏£‡πâ‡∏≠‡∏° highlight ‡∏´‡∏±‡∏ß‡∏Ç‡πâ‡∏≠‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô
for title in list(st.session_state.all_chats.keys()):
    is_selected = title == st.session_state.current_chat
    button_style = (
        "background-color: #cce5ff; font-weight: bold; border-radius: 5px; padding: 0.4rem;"
        if is_selected else
        "background-color: transparent; padding: 0.4rem;"
    )

    col1, col2, col3 = st.sidebar.columns([6, 1, 1])

    with col1:
        if st.markdown(
            f"""<div style="{button_style}">
                    <form action="" method="post">
                        <button name="select_chat" value="{title}" type="submit"
                            style="all: unset; cursor: pointer; width: 100%; display: block;">
                            {title}
                        </button>
                    </form>
                </div>""",
            unsafe_allow_html=True
        ):
            pass  # Markdown ‡πÑ‡∏°‡πà return ‡∏Ñ‡πà‡∏≤ ‡∏ï‡πâ‡∏≠‡∏á‡πÉ‡∏ä‡πâ workaround ‡∏î‡πâ‡∏≤‡∏ô‡∏•‡πà‡∏≤‡∏á

    # ‚úèÔ∏è ‡πÅ‡∏Å‡πâ‡∏ä‡∏∑‡πà‡∏≠
    if col2.button("‚úèÔ∏è", key=f"edit-{title}"):
        st.session_state.renaming = title
        st.rerun()

    # üóëÔ∏è ‡∏•‡∏ö‡∏´‡∏±‡∏ß‡∏Ç‡πâ‡∏≠
    if col3.button("üóëÔ∏è", key=f"delete-{title}"):
        del st.session_state.all_chats[title]
        if title == st.session_state.current_chat:
            st.session_state.current_chat = next(iter(st.session_state.all_chats), "‡πÅ‡∏ä‡∏ó‡πÉ‡∏´‡∏°‡πà")
        st.rerun()

# üì• ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Å‡∏≤‡∏£‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏´‡∏±‡∏ß‡∏Ç‡πâ‡∏≠ (‡∏à‡∏≤‡∏Å‡∏õ‡∏∏‡πà‡∏°‡πÅ‡∏ö‡∏ö form ‡∏Ç‡πâ‡∏≤‡∏á‡∏ö‡∏ô)
if "select_chat" in st.experimental_get_query_params():
    selected = st.experimental_get_query_params()["select_chat"][0]
    st.session_state.current_chat = selected
    st.session_state.renaming = None
    st.experimental_set_query_params()
    st.rerun()

# ‚úèÔ∏è input ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏ä‡∏∑‡πà‡∏≠‡∏´‡∏±‡∏ß‡∏Ç‡πâ‡∏≠
if st.session_state.renaming == st.session_state.current_chat:
    new_name = st.sidebar.text_input("‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏ä‡∏∑‡πà‡∏≠‡∏´‡∏±‡∏ß‡∏Ç‡πâ‡∏≠", value=st.session_state.current_chat)
    if st.sidebar.button("‚úÖ ‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏ä‡∏∑‡πà‡∏≠"):
        old_name = st.session_state.current_chat
        if new_name and new_name != old_name:
            st.session_state.all_chats[new_name] = st.session_state.all_chats.pop(old_name)
            st.session_state.current_chat = new_name
        st.session_state.renaming = None
        st.rerun()

# üßæ ‡∏î‡∏∂‡∏á‡∏ö‡∏ó‡∏™‡∏ô‡∏ó‡∏ô‡∏≤
chat_history = st.session_state.all_chats[st.session_state.current_chat]

# üí¨ ‡πÅ‡∏™‡∏î‡∏á‡∏ö‡∏ó‡∏™‡∏ô‡∏ó‡∏ô‡∏≤
for msg in chat_history[1:]:
    with st.chat_message(msg["role"]):
        st.markdown(msg["content"])

# üì§ ‡∏£‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏à‡∏≤‡∏Å‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ
if user_input := st.chat_input("‡∏û‡∏¥‡∏°‡∏û‡πå‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡∏ó‡∏µ‡πà‡∏ô‡∏µ‡πà..."):
    with st.chat_message("user"):
        st.markdown(user_input)
    chat_history.append({"role": "user", "content": user_input})

    with st.spinner("‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏Ñ‡∏¥‡∏î‡∏Ñ‡∏≥‡∏ï‡∏≠‡∏ö..."):
        headers = {
            "Authorization": f"Bearer {API_KEY}",
            "Content-Type": "application/json",
        }
        payload = {
            "model": MODEL,
            "messages": chat_history,
            "temperature": 0.7,
        }

        try:
            response = requests.post(API_URL, headers=headers, json=payload)
            res_json = response.json()

            if "choices" in res_json:
                reply = res_json["choices"][0]["message"]["content"]
            else:
                error_message = res_json.get("error", {}).get("message", "‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡∏à‡∏≤‡∏Å API")
                reply = f"‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡πÑ‡∏î‡πâ: {error_message}"

        except Exception as e:
            reply = f"‚ùå ‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡∏Ç‡∏ì‡∏∞‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠: {e}"

    with st.chat_message("assistant"):
        st.markdown(reply)
    chat_history.append({"role": "assistant", "content": reply})

